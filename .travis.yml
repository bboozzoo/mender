language: go

# Golang version matrix
go:
    - 1.7

env:
    global:
        # Should be encrypted or set as private travis variables (in travis settings):
        # - AWS_S3_ACCESS_KEY_ID=''
        # - AWS_S3_SECRET_ACCESS_KEY=''
        # - GITHUB_RELEASE_TOKEN=''

        # AWS S3 bucket name, need to have access setup.
        # Can be overridden by travis private variable set in travis settings: AWS_BUCKET_OVERRIDE
        - AWS_BUCKET_DEFAULT=mender-buildsystem

        # AWS region.
        # Can be overridden by travis private variable set in travis settings: AWS_REGION_OVERRIDE
        - AWS_REGION_DEFAULT=eu-west-1

        # AWS S3 ACL for build artifacts.
        # Valid ACL values are: private, public_read, public_read_write, authenticated_read,
        # bucket_owner_read, bucket_owner_full_control.
        # Can be overridden by travis private variable set in travis settings: AWS_S3_ACL_OVERRIDE
        - AWS_S3_ACL_DEFAULT=private

        # Perform deployment steps if the build is performed for build: user/repo_name
        # $TRAVIS_REPO_SLUG could be used if want to perform deploy on any repo.
        # Currently perform deployment steps only of building main repository.
        # Can be overridden by travis private variable set in travis settings: DEPLOY_REPO_OVERRIDE
        - DEPLOY_REPO_DEFAULT=mendersoftware/mender

        # Binary name to be uploaded to github release.
        - GITHUB_RELEASE_BINARY=mender

        # Build artifacts list, fomat: "file1 file2 ./dir/file3"
        # Can be overridden by travis private variable set in travis settings: BUILD_ARTIFATS_OVERRIDE
        - BUILD_ARTIFATS_DEFAULT="mender"

        # INTERNAL VARIABLES (for default/overrite management)
        - AWS_BUCKET=${AWS_BUCKET_OVERRIDE:-$AWS_BUCKET_DEFAULT}
        - AWS_REGION=${AWS_REGION_OVERRIDE:-$AWS_REGION_DEFAULT}
        - AWS_S3_ACL=${AWS_S3_ACL_OVERRIDE:-$AWS_S3_ACL_DEFAULT}
        - DEPLOY_REPO=${DEPLOY_REPO_OVERRIDE:-$DEPLOY_REPO_DEFAULT}
        - BUILD_ARTIFATS=${BUILD_ARTIFATS_OVERRIDE:-$BUILD_ARTIFATS_DEFAULT}

install:
    # Install code coverage / coveralls tooling
    - go get -u github.com/axw/gocov/gocov
    - go get -u github.com/mattn/goveralls
    - go get -u golang.org/x/tools/cmd/cover

    # Merge all subpackage code coverage reports into a single report
    - go get -u github.com/modocache/gover

    # Get tools used in Makefile
    - make get-tools

before_script:
    # Print build info that binary is compiled with.
    - echo $TRAVIS_COMMIT
    - echo $TRAVIS_TAG
    - echo $TRAVIS_BRANCH
    - echo $TRAVIS_BUILD_NUMBER
    - echo $TRAVIS_REPO_SLUG

    # run checks
    - make check

script:
    # go list supply import paths for all sub directories.
    # Exclude vendor directory, we don't want to run tests and coverage for all dependencies every time,
    # also including their coverage may introduce to much noice. Concentrate on the coverage of local packages.
    # Execute go test on every local subpackage (resolved as dependencies) and generate covreage report for each.
    # Test packages pararell (xargs -P)
    - go list ./... | grep -v vendor | xargs -n1 -I {} -P 4 go test -v -covermode=count -coverprofile=../../../{}/profile.coverprofile {}

    # Build local variant
    - make build V=1 LOCAL=1

    # Build
    - make build V=1

after_success:
    # Merge all coverage reports located in subdirectories and put them under: gover.coverprofile
    - gover

    # Send code coverage report to coveralls.io
    - goveralls -service=travis-ci -coverprofile=gover.coverprofile

    # Make build directory and copy all artifacts to this directory.
    - mkdir build
    - cp $BUILD_ARTIFATS build/

deploy:
    # In case tag is set. Deploy build as github release.
    # List of files to be uploaded need to be specified in 'file' field
    -
        provider: releases
        api_key: $GITHUB_RELEASE_TOKEN
        file: $GITHUB_RELEASE_BINARY
        skip_cleanup: true
        on:
            repo: $DEPLOY_REPO
            tags: true
            all_branches: true

    # Deploy tag builds to S3 in structure /user/repo/release/tag/os_arch/
    -
        provider: s3
        access_key_id: $AWS_S3_ACCESS_KEY_ID
        secret_access_key: $AWS_S3_SECRET_ACCESS_KEY
        bucket: $AWS_BUCKET
        region: $AWS_REGION
        upload-dir: $DEPLOY_REPO/release/$TRAVIS_TAG/`go env GOOS`_`go env GOARCH`
        local_dir: build
        skip_cleanup: true
        acl: $AWS_S3_ACL
        on:
            repo: $DEPLOY_REPO
            tags: true
            all_branches: true

    # Deploy all development builds to S3 in structure /user/repo/dev/branch/build/os_arch/
    -
        provider: s3
        access_key_id: $AWS_S3_ACCESS_KEY_ID
        secret_access_key: $AWS_S3_SECRET_ACCESS_KEY
        bucket: $AWS_BUCKET
        region: $AWS_REGION
        upload-dir: $DEPLOY_REPO/dev/$TRAVIS_BRANCH/$TRAVIS_BUILD_NUMBER/`go env GOOS`_`go env GOARCH`
        local_dir: build
        skip_cleanup: true
        acl: $AWS_S3_ACL
        on:
            repo: $DEPLOY_REPO
            tags: false
            all_branches: true

    # Deploy all builds to S3 as latest folder /user/repo/latest/branch/os_arch
    -
        provider: s3
        access_key_id: $AWS_S3_ACCESS_KEY_ID
        secret_access_key: $AWS_S3_SECRET_ACCESS_KEY
        bucket: $AWS_BUCKET
        region: $AWS_REGION
        upload-dir: $DEPLOY_REPO/latest/$TRAVIS_BRANCH/`go env GOOS`_`go env GOARCH`
        local_dir: build
        skip_cleanup: true
        acl: $AWS_S3_ACL
        on:
            repo: $DEPLOY_REPO
